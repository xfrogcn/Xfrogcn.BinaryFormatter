<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BinaryIncludeOnNonPublicInvalid" xml:space="preserve">
    <value>The non-public property '{0}' on type '{1}' is annotated with 'BinaryIncludeAttribute' which is invalid.</value>
  </data>
  <data name="CannotSerializeInvalidMember" xml:space="preserve">
    <value>The type '{0}' of property '{1}' on type '{2}' is invalid for serialization or deserialization because it is a pointer type, is a ref struct, or contains generic parameters that have not been replaced by specific types.</value>
  </data>
  <data name="CannotSerializeInvalidType" xml:space="preserve">
    <value>The type '{0}' is invalid for serialization or deserialization because it is a pointer type, is a ref struct, or contains generic parameters that have not been replaced by specific types.</value>
  </data>
  <data name="ConverterCanConvertNullableRedundant" xml:space="preserve">
    <value>The converter '{0}' handles type '{1}' but is being asked to convert type '{2}'. Either create a separate converter for type '{2}' or change the converter's 'CanConvert' method to only return 'true' for a single type.</value>
  </data>
  <data name="DefaultIgnoreConditionAlreadySpecified" xml:space="preserve">
    <value>'IgnoreNullValues' and 'DefaultIgnoreCondition' cannot both be set to non-default values.</value>
  </data>
  <data name="DefaultIgnoreConditionInvalid" xml:space="preserve">
    <value>The value cannot be 'BinaryIgnoreCondition.Always'.</value>
  </data>
  <data name="DeserializeUnableToConvertValue" xml:space="preserve">
    <value>The Binary value could not be converted to {0}.</value>
  </data>
  <data name="ExpectedBinaryTokens" xml:space="preserve">
    <value>The input does not contain any Binary tokens. Expected the input to start with a valid Binary token, when isFinalBlock is true.</value>
  </data>
  <data name="ExtensionDataCannotBindToCtorParam" xml:space="preserve">
    <value>The extension data property '{0}' on type '{1}' cannot bind with a parameter in constructor '{2}'.</value>
  </data>
  <data name="FailedToGetLargerSpan" xml:space="preserve">
    <value>The 'IBufferWriter' could not provide an output buffer that is large enough to continue writing.</value>
  </data>
  <data name="IgnoreConditionOnValueTypeInvalid" xml:space="preserve">
    <value>The ignore condition 'BinaryIgnoreCondition.WhenWritingNull' is not valid on value-type member '{0}' on type '{1}'. Consider using 'BinaryIgnoreCondition.WhenWritingDefault'.</value>
  </data>
  <data name="InvalidCast" xml:space="preserve">
    <value>Cannot get the value of a token type '{0}' as a {1}.</value>
  </data>
  <data name="MaxDepthMustBePositive" xml:space="preserve">
    <value>Max depth must be positive.</value>
  </data>
  <data name="MultipleMembersBindWithConstructorParameter" xml:space="preserve">
    <value>Members '{0}' and '{1}' on type '{2}' cannot both bind with parameter '{3}' in constructor '{4}' on deserialization.</value>
  </data>
  <data name="SerializationConverterNotCompatible" xml:space="preserve">
    <value>The converter '{0}' is not compatible with the type '{1}'.</value>
  </data>
  <data name="SerializationConverterOnAttributeInvalid" xml:space="preserve">
    <value>The converter specified on '{0}' does not derive from BinaryConverter or have a public parameterless constructor.</value>
  </data>
  <data name="SerializationConverterOnAttributeNotCompatible" xml:space="preserve">
    <value>The converter specified on '{0}' is not compatible with the type '{1}'.</value>
  </data>
  <data name="SerializationConverterRead" xml:space="preserve">
    <value>The converter '{0}' read too much or not enough.</value>
  </data>
  <data name="SerializationConverterWrite" xml:space="preserve">
    <value>The converter '{0}' wrote too much or not enough.</value>
  </data>
  <data name="SerializationDataExtensionPropertyInvalid" xml:space="preserve">
    <value>The data extension property '{0}.{1}' does not match the required signature of IDictionary&lt;string, BinaryElement&gt; or IDictionary&lt;string, object&gt;.</value>
  </data>
  <data name="SerializationDuplicateAttribute" xml:space="preserve">
    <value>The attribute '{0}' cannot exist more than once on '{1}'.</value>
  </data>
  <data name="SerializationDuplicateTypeAttribute" xml:space="preserve">
    <value>The type '{0}' cannot have more than one property that has the attribute '{1}'.</value>
  </data>
  <data name="SerializationNotSupportedParentType" xml:space="preserve">
    <value>The unsupported member type is located on type '{0}'.</value>
  </data>
  <data name="SerializationNotSupportedType" xml:space="preserve">
    <value>The type '{0}' is not supported.</value>
  </data>
  <data name="SerializerConverterFactoryReturnsNull" xml:space="preserve">
    <value>The converter '{0}' cannot return a null value.</value>
  </data>
  <data name="SerializerCycleDetected" xml:space="preserve">
    <value>A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of {0}. </value>
  </data>
  <data name="SerializerPropertyNameConflict" xml:space="preserve">
    <value>The Binary property name for '{0}.{1}' collides with another property.</value>
  </data>
  <data name="SerializerPropertyNameNull" xml:space="preserve">
    <value>The Binary property name for '{0}.{1}' cannot be null.</value>
  </data>
  <data name="SerializeUnableToSerialize" xml:space="preserve">
    <value>The object or value could not be serialized.</value>
  </data>
</root>